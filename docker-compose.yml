version: "3.9"

volumes:
  postgres_data:
  node_modules_cache:
  react_modules_cache:

services:
  #### react production build ####
  react:
    container_name: react
    image: node:lts-alpine
    working_dir: /usr/src/react
    restart: always
    command: npm run build:watch
    environment:
      PROJECT_NAME: "${PROJECT_NAME}"
      SERVER_URL: "${HOST_NAME}:8102"
    volumes:
      - ./ppsus-ears-react/:/usr/src/react/
      - ./ppsus-ears-react/package-lock.json:/usr/src/react/package-lock.json
      - ./ppsus-ears-react/package.json:/usr/src/react/package.json
      - react_modules_cache:/usr/src/react/node_modules
  server:
    container_name: server
    image: nginx:stable-alpine
    working_dir: /usr
    restart: always
    command:  [nginx-debug, '-g', 'daemon off;']
    ports:
      - "8101:80"
    environment:
      NGINX_HOST: "${HOST_NAME}"
      NGINX_PORT: 80
    volumes:
      - ./ppsus-ears-react/build/:/usr/share/nginx/html/
    depends_on:
      - react
    networks:
      - ppsus_net
  #########################################################
  ##### node api #####
  node:
    container_name: node
    build:
      context: ./ppsus-ears-node
      dockerfile: Dockerfile
    restart: always
    command: dumb-init npm start
    environment:
      SERVER_NAME : "${PROJECT_NAME} - node"
      SERVER_HOST : "${HOST_NAME}"
      SERVER_PORT : 8102
      DATABASE_DIALECT : 'postgress'
      DATABASE_HOST : 'postgress'
      DATABASE_PORT : 5432
      DATABASE_NAME : "${DATABASE_NAME}"
      DATABASE_USER : "${DATABASE_USER}"
      DATABASE_PASSWORD : "${DATABASE_PASSWORD}"
    ports:
      - "8102:8102"
    volumes:
      - ./ppsus-ears-node/:/usr/src/node/
      - ./ppsus-ears-node/package-lock.json:/usr/src/node/package-lock.json
      - ./ppsus-ears-node/package.json:/usr/src/node/package.json
      - node_modules_cache:/usr/src/node/node_modules
    networks:
      - ppsus_net
  ########################################################
  #### Data base ####
#  postgres:
#    container_name: postgres
#    image: postgres:alpine
#    restart: on-failure
#    environment:
#      POSTGRES_DB: "${DATABASE_NAME}"
#      POSTGRES_USER: "${DATABASE_USER}"
#      POSTGRES_PASSWORD: "${DATABASE_PASSWORD}"
#    ports:
#      - "8103:5432"
#    volumes:
#      - postgres_data:/var/lib/postgresql/data/
#    networks:
#      - ppsus_net
#### Internal Container Connection ####
networks:
  ppsus_net:
    driver: bridge
